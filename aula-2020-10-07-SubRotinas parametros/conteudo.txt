Subrotina Parametros

sintaxe
 tipo nome, tipo nome, tipo nome..

ex: float soma(float a, float b, float c)
    {....}


passagem por valor x passagem por referencia

Passagem por valor
   o argumento recebe uma copia do parametro passado
   ex do codigo abaixo o argumento x na subrotina incremento
      recebe uma copia do valor de a, por isso
      quando incrementa o valor de x, o valor de a nao é alterado.

ex:

#include <stdio.h>

void incremento(int x)
{
   x = x + 1;
}

int main(void)
{
    int a = 10;
    incremento(a);
    printf("a=%d\n",a);
    return 0;
}

obs: o padrao de C eh passagem por valor, a unica excessão
     são os vetores que são passados por referencia sempre.

os vetores sempre são passados por referencia, por isso
no codigo abaixo a subrotina ler altera os valores vet,
pos o argumento v é uma referencia ao parametro vet.

#include <stdio.h>

void lerVet(int v[], int qtd)
{
   int i;
   for(i=0; i<qtd; i++)
   {
       printf("V[%i]=",i);
       scanf("%d", &v[i]);
   }
}

void mostrarVet(int v[], int qtd)
{
   int i;
   for(i=0; i<qtd; i++)
       printf("%i ",v[i]);
   printf("\n");
}

int main(void)
{
    int vet[10];
    lerVet(vet,10);
    mostrarVet(vet,10);
    return 0;
}


Passagem por referencia
   o argumento é uma referencia ao parametro passado
   ex do codigo abaixo o argumento x na subrotina incremento
      é uma referencia a variavel a, por isso
      quando incrementa o valor de x, o valor de a é alterado.

ex:

#include <stdio.h>

void incremento(int *x)
{
   *x = *x + 1;
}

int main(void)
{
    int a = 10;
    incremento(&a);
    printf("a=%d\n",a);
    return 0;
}


demonstração de exercicio complexo 1:
faça uma agenda de contatos com menu e as seguintes operações
1. inserir
2. remover
3. alterar
4. listar todos
5. listar filtrando por parte do nome ou telefone
6. sair

na agenda cada contato tem nome e telefone somente.

1. pensar nas entidades que estão sendo manipuladas
   agenda e contado
2. para cada entidade definir o dominio (criar um tipo de dados para representa-lo)
   contado
       nome    : string[30]
       telefone: string[15]      (xx)12345-1234

   agenda
       v : vetor [100] de contato    
      qtd: inteiro 

3. para cada entidade definir as operações necessarias
   contato
       ler : void
        
   agenda
       inserir : void  
       remover : void
       alterar : void
       listar  : void
       filtrar : void
       obterIndice: inteiro

4. para cada entidade criar uma strutura e 
   para cada operação criar uma subrotina onde o primeiro
   parametro é a estrutura

5. fazer o programa principal


